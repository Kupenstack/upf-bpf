#ifndef __UPFPROGRAMMANAGER_H__
#define __UPFPROGRAMMANAGER_H__

#include <atomic>
#include <linux/bpf.h> // manage maps (e.g. bpf_update*)
#include <memory>
#include <mutex>
#include <upf_xdp_bpf_skel.h>
#include <utils/LogDefines.h>

class BPFMaps;
/**
 * @brief Singleton class to abrastract the UPF bpf program.
 */
class UPFProgramManager
{
public:
  /**
   * @brief Program states.
   */
  enum ProgramState {
    IDLE,
    OPENED,
    LOADED,
    ATTACHED,
    LINKED,
    DESTROYED,
  };

  /**
   * @brief Destroy the UPFProgramManager object
   */
  virtual ~UPFProgramManager();
  /**
   * @brief Setup the BPF program.
   *
   */
  void setup();
  /**
   * @brief Get the Skeleton object.
   *
   * @return upf_xdp_bpf_c*  The skeleton generated by bpftoo.
   */
  upf_xdp_bpf_c *getSkeleton();
  /**
   * @brief Get the Instance object.
   *
   * @return UPFProgramManager& The singleton instance.
   */
  static UPFProgramManager &getInstance();
  /**
   * @brief Get the BPFMaps object.
   *
   * @return std::shared_ptr<BPFMaps> The reference of the BPFMaps.
   */
  std::shared_ptr<BPFMaps> getMaps();

private:
  /**
   * @brief Construct a new UPFProgramManager object.
   *
   */
  explicit UPFProgramManager();
  // TODO navarrothiago - It could be decopled.
  /**
   * @brief Tear downs the BPF program.
   * It is also used as signal callback.
   *
   * @param signal  The received signal
   */
  static void tearDown(int signal);

  // TODO navarrothiago - It could be decopled.
  /**
   * @brief Open the BPF program.
   *
   */
  void open();
  /**
   * @brief Load the BPF program.
   *
   */
  void load();
  /**
   * @brief Attach the BPF program.
   *
   */
  void attach();
  /**
   * @brief Destroy the BPF program.
   *
   */
  void destroy();

  // The skeleton of the UPF program generated by bpftool.
  upf_xdp_bpf_c *mpSkeleton;

  // The reference of the bpf maps.
  std::shared_ptr<BPFMaps> mpMaps;

  // The program state.
  static std::atomic<ProgramState> sState;

  struct bpf_prog_info info = {};
  __u32 info_len = sizeof(info);
  static std::mutex sTearDownMutex;
  static int mIfindexIn, mIfindexOut;
  static bool mIfindexOutXdpRedirectAttached;
  static unsigned int mXdpFlags;
  static unsigned int mProgramId, mProgramRedirectId;
  static int mProgramFd;
  static int mProgramRedirectFd;
};

#endif // __BPFPROGRAMMANAGER_H__
